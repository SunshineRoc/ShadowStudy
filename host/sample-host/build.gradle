//apply plugin: 'com.android.application'
apply plugin: 'com.android.library'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
//        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.test.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/sample-manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/sample-manager/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "commons-io:commons-io:$commons_io_android_version"//sample-host从assets中复制插件用的
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':sample-constant')
    implementation project(':sample-host-lib')
}

/**
 * 复制文件的任务
 *
 * @param projectName: 模块名
 * @param buildType：  打包类型：debug或release
 * @param name：       复制到的目标文件的目录名
 * @param apkName：    复制到的目标文件的文件名
 * @param inputFile：  待复制的原文件
 * @param taskName：   任务名
 *
 * */
def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}${apkName.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    // plugin-manager、runtime、loader和插件存放在assets中的文件夹的名字
    def directoryName = "plugin-directory"

    /*
      第一步：把PluginManager复制到宿主 build 的 assets 目录中
      */
    def moduleName = 'sample-manager'
    def pluginManagerApkFile = file(
            "${project(":$moduleName").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ":$moduleName",
            buildType,
            directoryName,
            'plugin-manager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    /*
      第二步：把runtime复制到宿主 build 的 assets 目录中
     */
    def runtimeModule = 'sample-runtime'
    def runtimeApkFile = file(
            "${project(":$runtimeModule").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${runtimeModule}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ":$runtimeModule",
            buildType,
            directoryName,
            "$runtimeModule-${buildType}.apk",
            runtimeApkFile,
            "assemble${buildType.capitalize()}"
    )

    /*
      第三步：把loader复制到宿主 build 的 assets 目录中
     */
    def loaderModule = 'sample-loader'
    def loaderApkFile = file(
            "${project(":$loaderModule").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${loaderModule}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ":$loaderModule",
            buildType,
            directoryName,
            "$loaderModule-${buildType}.apk",
            loaderApkFile,
            "assemble${buildType.capitalize()}"
    )

    /*
      第四步：把插件1的apk包和config.json复制到宿主 build 的 assets 目录中
     */
    def pluginOneModule = 'sample-app1'
    def pluginOneApkFile = file(
            "${project(":$pluginOneModule").getBuildDir()}" +
                    "/outputs/apk/plugin/${buildType}/" +
                    "${pluginOneModule}-plugin-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ":$pluginOneModule",
            buildType,
            directoryName,
            "$pluginOneModule-plugin-${buildType}.apk",
            pluginOneApkFile,
            "assemble${buildType.capitalize()}"
    )
    def pluginOneConfigFile = file(
            "${project(":$pluginOneModule").getBuildDir()}" +
                    "/intermediates/generatePluginConfig/${buildType}/config.json"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ":$pluginOneModule",
            buildType,
            directoryName,
            "$pluginOneModule-${buildType}-config.json",
            pluginOneConfigFile,
            "assemble${buildType.capitalize()}"
    )

//    println("generateAssets() ==》 打包：getBuildDir()=${getBuildDir()}" +
//            "，buildType=$buildType" +
//            "，moduleName=" + moduleName + "\npluginOneApkFile.path" + pluginOneApkFile.path + "\npluginZip.pluginZip=" + pluginZip.path)
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}